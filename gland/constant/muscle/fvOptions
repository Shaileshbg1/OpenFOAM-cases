/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

metabolic_heat_generation_muscle
{
    type            scalarSemiImplicitSource;
    active          true;
 
    scalarSemiImplicitSourceCoeffs
    {
        selectionMode   cellZone; // all, cellSet, cellZone, points
        cellZone         muscle;
        volumeMode      specific; // absolute;
        injectionRateSuSp
        {
            h    (700 0);
        }
    }
}


blood_perfusion_muscle
{
    type          scalarCodedSource;

    active        true;
 
     name    sourceTime;

    scalarCodedSourceCoeffs
    { 
        selectionMode   cellZone;
        cellZone        muscle;
        fields          (h);
       
        
        codeInclude
        #{

        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
	     //scalar Tvol = 0;
            //const Time& time = mesh().time();
            const volScalarField& T = mesh_.lookupObject<volScalarField>("T"); 
            //Tvol = Tm.weightedAverage(mesh_.V()).value();               		 //averageValue of the volScalarField
            const vectorField& C = mesh_.C();                   			 //List of cellcentres
	    const scalarField& V = mesh_.V();
	    const volScalarField z = T.mesh().C() & vector(1,1,1);
            scalarField& hSource = eqn.source();               				 //defining source

	    forAll(T, i)
            {
                hSource[i] -= (37 - T[i])*3600*V[i];
            }

            Pout << "***codeAddSup***" << endl;
        #};

        codeSetValue
        #{
            Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    sourceTimeCoeffs
    {
          $scalarCodedSourceCoeffs;
    }
}


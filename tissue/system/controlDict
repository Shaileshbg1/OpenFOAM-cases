/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     chtMultiRegionSimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          1;

writeControl    timeStep;

writeInterval   100;

purgeWrite      10;

writeFormat     ascii;

writePrecision  7;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    
  //  #includeFunc probes
   // #includeFunc singleGraph
   #includeFunc surfaces
  //  #includeFunc sample
 /*
   minMaxT
   {
     type    fieldMinMax;
     region  tissue;
     functionObjectLibs ("libfieldFunctionObjects.so");
     fields
      (
        T
      );
     mode  magnitude;
     outputControl  timeStep;
     outputInterval 1;
   }
 
    surfaceSampling
    {
        // Sample near-wall velocity

        type surfaces;
        region tissue;

        // Where to load it from (if not already in solver)
        libs            ("libsampling.so");
        writeControl    writeTime;

        interpolationScheme cellPoint;

        surfaceFormat vtk;

        // Fields to be sampled
        fields
        (
            T
        );

        surfaces
        (
            nearWall
            {
                type            patchInternalField;
                patches         ( skin );
                distance        1E-6;
                interpolate     true;
                triangulate     false;
            }
        );
    }
*/

  /*   faceObj1
    {
        type            faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         true;
        outputControl   outputTime;

        // Output to log&file (true) or to file only
        log             true;

        // Output field values as well
        valueOutput     true;

        // Type of source: patch/faceZone/sampledSurface
        source          patch;

//         // if patch or faceZone: name of patch or faceZone
         sourceName      skin;

        //// if sampledSurface: dictionary with a sampledSurface
        //// Note: will not sample surface fields.
        //sampledSurfaceDict
        //{
           // Sampling on triSurface
           //type        sampledTriSurfaceMesh;
           //surface     Scale_1.stl;
           //source      cells;  // sample cells or boundaryFaces
           //interpolate false;
        //}

        // Operation: areaAverage/sum/weightedAverage ...
        operation       areaNormalIntegrate;

        fields
        (
            T
            
        );
    }
*/
}
// ************************************************************************* //

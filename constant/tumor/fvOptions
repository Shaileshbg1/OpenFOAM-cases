/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

 
metabolic_heat_generation_tumor
{
    type            scalarSemiImplicitSource;
    active          true;
 
    scalarSemiImplicitSourceCoeffs
    {
        selectionMode   cellZone; // all, cellSet, cellZone, points
        cellZone         tumor;
        volumeMode      specific; // absolute;
        injectionRateSuSp
        {
            h   (654422.829229 0);
        }
    }
}

blood_perfusion_tumor
{
    type          scalarCodedSource;
    name    sourceTime;
    active          true;
    

    scalarCodedSourceCoeffs
    {
        
        selectionMode   cellZone;
        cellZone        tumor;
	fields      (h);

        codeInclude
        #{

        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
	    
            //const Time& time = mesh().time();
	    const volScalarField& T = mesh_.lookupObject<volScalarField>("T");
	    //const vectorField& C = mesh_.C();                    //List of cellcentres
	    const scalarField& V = mesh_.V();
	    scalarField& hSource = eqn.source();                //defining source
            forAll(T, i)
            {
                hSource[i] -= (37 - T[i])*48000*V[i];
		
            }
	    
            Pout << "***codeAddSup***" << endl;
        #};

        codeSetValue
        #{
            Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    sourceTimeCoeffs
    {
         $scalarCodedSourceCoeffs;
    }
}


// ************************************************************************* //

 


